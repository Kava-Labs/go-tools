// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kava-labs/go-tools/deputy-claimer/claim (interfaces: KavaChainClient)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	types "github.com/kava-labs/cosmos-sdk/types"
	exported "github.com/kava-labs/cosmos-sdk/x/auth/exported"
	client "github.com/kava-labs/go-sdk/client"
	bep3 "github.com/kava-labs/go-sdk/kava/bep3"
	coretypes "github.com/kava-labs/tendermint/rpc/core/types"
	types0 "github.com/kava-labs/tendermint/types"
	amino "github.com/tendermint/go-amino"
	reflect "reflect"
)

// MockKavaChainClient is a mock of KavaChainClient interface
type MockKavaChainClient struct {
	ctrl     *gomock.Controller
	recorder *MockKavaChainClientMockRecorder
}

// MockKavaChainClientMockRecorder is the mock recorder for MockKavaChainClient
type MockKavaChainClientMockRecorder struct {
	mock *MockKavaChainClient
}

// NewMockKavaChainClient creates a new mock instance
func NewMockKavaChainClient(ctrl *gomock.Controller) *MockKavaChainClient {
	mock := &MockKavaChainClient{ctrl: ctrl}
	mock.recorder = &MockKavaChainClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKavaChainClient) EXPECT() *MockKavaChainClientMockRecorder {
	return m.recorder
}

// BroadcastTx mocks base method
func (m *MockKavaChainClient) BroadcastTx(arg0 types0.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BroadcastTx indicates an expected call of BroadcastTx
func (mr *MockKavaChainClientMockRecorder) BroadcastTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTx", reflect.TypeOf((*MockKavaChainClient)(nil).BroadcastTx), arg0)
}

// GetAccount mocks base method
func (m *MockKavaChainClient) GetAccount(arg0 types.AccAddress) (exported.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0)
	ret0, _ := ret[0].(exported.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockKavaChainClientMockRecorder) GetAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockKavaChainClient)(nil).GetAccount), arg0)
}

// GetChainID mocks base method
func (m *MockKavaChainClient) GetChainID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainID indicates an expected call of GetChainID
func (mr *MockKavaChainClientMockRecorder) GetChainID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainID", reflect.TypeOf((*MockKavaChainClient)(nil).GetChainID))
}

// GetCodec mocks base method
func (m *MockKavaChainClient) GetCodec() *amino.Codec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodec")
	ret0, _ := ret[0].(*amino.Codec)
	return ret0
}

// GetCodec indicates an expected call of GetCodec
func (mr *MockKavaChainClientMockRecorder) GetCodec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodec", reflect.TypeOf((*MockKavaChainClient)(nil).GetCodec))
}

// GetOpenOutgoingSwaps mocks base method
func (m *MockKavaChainClient) GetOpenOutgoingSwaps() (bep3.AtomicSwaps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenOutgoingSwaps")
	ret0, _ := ret[0].(bep3.AtomicSwaps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenOutgoingSwaps indicates an expected call of GetOpenOutgoingSwaps
func (mr *MockKavaChainClientMockRecorder) GetOpenOutgoingSwaps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenOutgoingSwaps", reflect.TypeOf((*MockKavaChainClient)(nil).GetOpenOutgoingSwaps))
}

// GetRPCClient mocks base method
func (m *MockKavaChainClient) GetRPCClient() *client.KavaClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRPCClient")
	ret0, _ := ret[0].(*client.KavaClient)
	return ret0
}

// GetRPCClient indicates an expected call of GetRPCClient
func (mr *MockKavaChainClientMockRecorder) GetRPCClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRPCClient", reflect.TypeOf((*MockKavaChainClient)(nil).GetRPCClient))
}

// GetRandomNumberFromSwap mocks base method
func (m *MockKavaChainClient) GetRandomNumberFromSwap(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomNumberFromSwap", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomNumberFromSwap indicates an expected call of GetRandomNumberFromSwap
func (mr *MockKavaChainClientMockRecorder) GetRandomNumberFromSwap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomNumberFromSwap", reflect.TypeOf((*MockKavaChainClient)(nil).GetRandomNumberFromSwap), arg0)
}

// GetTxConfirmation mocks base method
func (m *MockKavaChainClient) GetTxConfirmation(arg0 []byte) (*coretypes.ResultTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxConfirmation", arg0)
	ret0, _ := ret[0].(*coretypes.ResultTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxConfirmation indicates an expected call of GetTxConfirmation
func (mr *MockKavaChainClientMockRecorder) GetTxConfirmation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxConfirmation", reflect.TypeOf((*MockKavaChainClient)(nil).GetTxConfirmation), arg0)
}
