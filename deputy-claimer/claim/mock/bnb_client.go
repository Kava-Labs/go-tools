// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kava-labs/go-tools/deputy-claimer/claim (interfaces: BnbChainClient)

// Package mock is a generated GoMock package.
package mock

import (
	rpc "github.com/binance-chain/go-sdk/client/rpc"
	types "github.com/binance-chain/go-sdk/common/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBnbChainClient is a mock of BnbChainClient interface
type MockBnbChainClient struct {
	ctrl     *gomock.Controller
	recorder *MockBnbChainClientMockRecorder
}

// MockBnbChainClientMockRecorder is the mock recorder for MockBnbChainClient
type MockBnbChainClientMockRecorder struct {
	mock *MockBnbChainClient
}

// NewMockBnbChainClient creates a new mock instance
func NewMockBnbChainClient(ctrl *gomock.Controller) *MockBnbChainClient {
	mock := &MockBnbChainClient{ctrl: ctrl}
	mock.recorder = &MockBnbChainClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBnbChainClient) EXPECT() *MockBnbChainClientMockRecorder {
	return m.recorder
}

// GetBNBSDKClient mocks base method
func (m *MockBnbChainClient) GetBNBSDKClient() *rpc.HTTP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBNBSDKClient")
	ret0, _ := ret[0].(*rpc.HTTP)
	return ret0
}

// GetBNBSDKClient indicates an expected call of GetBNBSDKClient
func (mr *MockBnbChainClientMockRecorder) GetBNBSDKClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBNBSDKClient", reflect.TypeOf((*MockBnbChainClient)(nil).GetBNBSDKClient))
}

// GetOpenSwaps mocks base method
func (m *MockBnbChainClient) GetOpenSwaps() ([]types.AtomicSwap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenSwaps")
	ret0, _ := ret[0].([]types.AtomicSwap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenSwaps indicates an expected call of GetOpenSwaps
func (mr *MockBnbChainClientMockRecorder) GetOpenSwaps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenSwaps", reflect.TypeOf((*MockBnbChainClient)(nil).GetOpenSwaps))
}

// GetSwapByID mocks base method
func (m *MockBnbChainClient) GetSwapByID(arg0 types.SwapBytes) (types.AtomicSwap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwapByID", arg0)
	ret0, _ := ret[0].(types.AtomicSwap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwapByID indicates an expected call of GetSwapByID
func (mr *MockBnbChainClientMockRecorder) GetSwapByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwapByID", reflect.TypeOf((*MockBnbChainClient)(nil).GetSwapByID), arg0)
}

// GetTxConfirmation mocks base method
func (m *MockBnbChainClient) GetTxConfirmation(arg0 []byte) (*rpc.ResultTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxConfirmation", arg0)
	ret0, _ := ret[0].(*rpc.ResultTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxConfirmation indicates an expected call of GetTxConfirmation
func (mr *MockBnbChainClientMockRecorder) GetTxConfirmation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxConfirmation", reflect.TypeOf((*MockBnbChainClient)(nil).GetTxConfirmation), arg0)
}
